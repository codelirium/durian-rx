buildscript {
	repositories {
		jcenter()
		mavenLocal()
	}
	dependencies {
		// applies the Eclipse java formatter
		classpath "com.diffplug.gradle.spotless:spotless:${VER_SPOTLESS}"
		// uploads artifacts to jcenter
		classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:${VER_BINTRAY}"
		configurations.all {
			resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
		}
	}
}

repositories {
	jcenter()
	mavenLocal()
}

//////////
// JAVA //
//////////
apply plugin: 'java'
sourceSets {
	main { java {
			srcDir 'src'
	} }
	test { java {
			srcDir 'test'
	} }
}
sourceCompatibility = VER_JAVA
targetCompatibility = VER_JAVA

dependencies {
	compile "com.diffplug.durian:durian:${VER_DURIAN}"
	compile "com.google.guava:guava:${VER_GUAVA}"
	compile "io.reactivex:rxjava:${VER_RXJAVA}"
	testCompile "junit:junit:${VER_JUNIT}"
}

jar.manifest {
	from 'META-INF/MANIFEST.MF'
}

/////////////
// ECLIPSE //
/////////////
apply plugin: 'eclipse'
eclipse {
	project {
		natures 'org.eclipse.pde.PluginNature'
		natures 'org.eclipse.jdt.core.javanature'

		buildCommand 'org.eclipse.jdt.core.javabuilder'
		buildCommand 'org.eclipse.pde.ManifestBuilder'
		buildCommand 'org.eclipse.pde.SchemaBuilder'
	}
	classpath {
		downloadSources true
		downloadJavadoc true
	}
	jdt {
		sourceCompatibility VER_JAVA
		targetCompatibility VER_JAVA
	}
}
// always create fresh projects
tasks.eclipse.dependsOn(cleanEclipse)

////////////
// FORMAT //
////////////
apply plugin: 'com.diffplug.gradle.spotless'
spotless {
	java {
		licenseHeaderFile	'spotless.license.java'				// License header file
		importOrderFile		'spotless.importorder.properties'	// An import ordering file, exported from Eclipse
		eclipseFormatFile	'spotless.eclipseformat.xml'		// XML file dumped out by the Eclipse formatter
		// Eclipse formatter puts excess whitespace after lambda blocks
		//    funcThatTakesLambdas(x -> {} , y -> {} )	// what Eclipse does
		//    funcThatTakesLambdas(x -> {}, y -> {})	// what I wish Eclipse did
		custom 'Lambda fix', { it.replace('} )', '})').replace('} ,', '},') }
	}
	format 'misc', {
		target '**/*.gradle', '**/*.md', '**/.gitignore'
		indentWithTabs()
		trimTrailingWhitespace()
	}
}

//////////////
// FINDBUGS //
//////////////
apply plugin: 'findbugs'
findbugs {
	toolVersion = VER_FINDBUGS
	sourceSets = [sourceSets.main]	// don't check the test code
	ignoreFailures = false 	// bug free or it doesn't ship!
	reportsDir = file('build/findbugs')
	effort = 'max'			// min|default|max
	reportLevel = 'low'		// low|medium|high (low = sensitive to even minor mistakes)
	omitVisitors = []		// bugs that we want to ignore
}
// HTML instead of XML
tasks.withType(FindBugs) {
	reports {
		xml.enabled = false
		html.enabled = true
	}
}
// we'll want the findbugs annotations
dependencies {
	compile "com.google.code.findbugs:annotations:${VER_FINDBUGS}"
}

///////////
// MAVEN //
///////////
apply plugin: 'maven-publish'

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allJava
}

// Where it's possible to name parameters and methods clearly enough
// that javadoc is not necessary, why make the code bigger?
//
// Thus, no javadoc warnings.
javadoc {
	options.addStringOption('Xdoclint:none', '-quiet')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
			artifact sourcesJar
			artifact javadocJar
		}
	}
	if (project.hasProperty('dp_maven')) {
		repositories {
			maven {
				if (project.version.endsWith('-SNAPSHOT')) {
					url "${dp_maven}/libs-snapshot-local"
				} else {
					url "${dp_maven}/libs-release-local"
				}

				credentials {
					username "${dp_maven_user}"
					password "${dp_maven_pass}"
				}
			}
		}
	}
}

/////////////
// BINTRAY //
/////////////
if (project.hasProperty('dp_bintray_user')) {
	apply plugin: 'com.jfrog.bintray'
	bintray {
		user = dp_bintray_user
		key = dp_bintray_key

		publish=false
		publications = ['mavenJava']
		pkg {
			repo = 'opensource'
			name = project.name
			userOrg = project.org
			desc = project.description
			websiteUrl = "https://github.com/${org}/${name}"
			issueTrackerUrl = "https://github.com/${org}/${name}/issues"
			vcsUrl = "https://github.com/${org}/${name}"
			licenses = ['Apache-2.0']
			publicDownloadNumbers = true
			// Optional version descriptor
			version {
				name = project.version
				if (project.version.endsWith('SNAPSHOT')) {
					vcsTag = 'develop'
				} else {
					vcsTag = 'v' + project.version
				}
			}
		}
	}
	// surprisingly, this actually needs to be here
	bintrayUpload.dependsOn(publish)
}
